const bcrypt = require("bcrypt");
const { validationResult } = require("express-validator");
const { checkStudentNumberExists, registerStudent, getAllStudents, getStudentById, updateStudent, softDeleteStudent, restoreStudent, resetStudentPassword, deleteStudentPermanently, unlockStudentAccount, processBatchStudents } = require("../models/studentModel");
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');
const pool = require("../config/db");


const generateStudentPassword = (lastName, studentNumber) => {
  const lastThreeDigits = studentNumber.slice(-3);
  const specialCharacter = "!";
  return `${lastName}${lastThreeDigits}${specialCharacter}`;
}

const isValidStudentEmail = (email, studentNumber, lastName) => {
  const lastSixDigits = studentNumber.slice(-6); 
  const expectedEmail = `${lastName.toLowerCase()}.${lastSixDigits}@novaliches.sti.edu.ph`;
  return email.toLowerCase() === expectedEmail;
};

exports.registerStudent = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log("Validation errors:", errors.array());
      return res.status(400).json({ errors: errors.array() });
    }

    let { firstName, lastName, email, studentNumber, courseName, yearLevel, gender, createdBy } = req.body;

    if (!createdBy) {
      console.error("Missing Super Admin ID in request.");
      return res.status(400).json({ message: "Super Admin ID is required." });
    }

    console.log("Received data:", req.body);


    if (!isValidStudentEmail(email, studentNumber, lastName)) {
      return res.status(400).json({ message: "Invalid email format. Use {last name}.{last 6 digits of student number}@novaliches.sti.edu.ph" });
    }

    
    email = email.trim().toLowerCase();
    if (!email.endsWith("@novaliches.sti.edu.ph")) {
      return res.status(400).json({ message: "Invalid email domain. Only @novaliches.sti.edu.ph emails are allowed." });
    }

 
    if (await checkStudentNumberExists(studentNumber)) {
      return res.status(400).json({ message: "Student Number already exists" });
    }

   
    const autoGeneratedPassword = generateStudentPassword(lastName, studentNumber);
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    
    console.log(" Registering Student:", firstName, lastName, email);
    const newStudent = await registerStudent(firstName, lastName, email, email, hashedPassword, studentNumber, courseName, yearLevel, gender, createdBy);

    res.status(201).json({ message: "Student registered successfully", student: newStudent, password: autoGeneratedPassword });
  } catch (error) {
    console.error("Error Registering Student:", error);
    res.status(500).json({ message: "Internal Server Error", error: error.message });
  }
};

exports.getAllStudents = async (req, res) => {
  try {
    const students = await getAllStudents();
    res.status(200).json({ students });
  } catch (error) {
    console.error("Error fetching students:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.getStudentById = async (req, res) => {
  try {
    const studentId = req.params.id;
    const student = await getStudentById(studentId);

    if (!student) {
      return res.status(404).json({ message: "Student not found" });
    }

    res.status(200).json({ student });
  } catch (error) {
    console.error("Error fetching student by ID:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.editStudent = async (req, res) => {
  try {
    const studentId = req.params.id;
    const { firstName, lastName, courseName, yearLevel, gender } = req.body;

    if (!firstName || !lastName || !courseName || !yearLevel || !gender) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const updatedStudent = await updateStudent(studentId, firstName, lastName, courseName, yearLevel, gender);

    if (!updatedStudent) {
      return res.status(404).json({ message: "Student not found" });
    }

    res.status(200).json({ message: "Student updated successfully", student: updatedStudent });
  } catch (error) {
    console.error("Error updating student:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.deleteStudent = async (req, res) => {
  try {
    const studentId = req.params.id;

    const deletedStudent = await softDeleteStudent(studentId);
    if (!deletedStudent) {
      return res.status(404).json({ message: "Student not found" });
    }

    res.status(200).json({ message: "Student deleted successfully (soft delete)", student: deletedStudent });
  } catch (error) {
    console.error("Error deleting student:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.restoreStudent = async (req, res) => {
  try {
    const studentId = req.params.id;

    const restoredStudent = await restoreStudent(studentId);
    if (!restoredStudent) {
      return res.status(404).json({ message: "Student not found" });
    }

    res.status(200).json({ message: "Student restored successfully", student: restoredStudent });
  } catch (error) {
    console.error("Error restoring student:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.resetStudentPassword = async (req, res) => {
  try {
    const { studentId, newPassword } = req.body;

    if (!studentId || !newPassword) {
      return res.status(400).json({ message: "Student ID and new password are required." });
    }

    const passwordRegex = /^(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    if (!passwordRegex.test(newPassword)) {
      return res.status(400).json({ message: "Password must be at least 8 characters long, include an uppercase letter, a number, and a special character." });
    }

    const updatedStudent = await resetStudentPassword(studentId, newPassword);
    if (!updatedStudent) {
      return res.status(404).json({ message: "Student not found or not linked to a user." });
    }

    res.status(200).json({ message: "Student password reset successfully", student: updatedStudent });
  } catch (error) {
    console.error("Error resetting student password:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.permanentDeleteStudent = async (req, res) => {
  try {
    const studentId = req.params.id;

    const deletedStudent = await deleteStudentPermanently(studentId);
    if (!deletedStudent) {
      return res.status(404).json({ message: "Student not found or already deleted permanently." });
    }

    res.status(200).json({ message: "Student permanently deleted." });
  } catch (error) {
    console.error("Error permanently deleting student:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.unlockStudentAccount = async (req, res) => {
  try {
    const studentId = req.params.id;
    const unlockedAccount = await unlockStudentAccount(studentId);
    
    if (!unlockedAccount) {
      return res.status(404).json({ message: "Student not found" });
    }
    
    res.status(200).json({ message: "Student account unlocked successfully" });
  } catch (error) {
    console.error("Error unlocking student account:", error);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

exports.uploadStudentsBatch = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'No file uploaded' });
    }
    if (!req.body.createdBy) {
      return res.status(400).json({ message: 'Super Admin ID is required' });
    }

    const filePath = path.resolve(req.file.path);
    
    if (!fs.existsSync(filePath)) {
      throw new Error('Uploaded file not found');
    }

    
    const workbook = XLSX.read(fs.readFileSync(filePath));
    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
    const jsonData = XLSX.utils.sheet_to_json(worksheet);


    const result = await processBatchStudents(jsonData, req.body.createdBy);

    
    try {
      fs.unlinkSync(filePath);
    } catch (unlinkError) {
      console.error('Error deleting temp file:', unlinkError);
    }

    res.status(200).json({
      message: 'Batch upload processed',
      total: jsonData.length,
      success: result.success,
      failed: result.failed,
      errors: result.errors
    });
  } catch (error) {
    console.error('Error processing batch upload:', error);
    res.status(500).json({ 
      message: 'Error processing batch upload',
      error: error.message 
    });
  }
};

exports.getStudentElections = async (req, res) => {
  try {
    console.log("Student elections requested by user:", req.user);

    const userId = req.user.id;
    const studentId = req.user.studentId;
    
    if (!userId) {
      console.log("No user ID found in token");
      return res.status(401).json({ message: "Authentication required. User ID not found in token." });
    }
    
    console.log("Looking up elections for studentId:", studentId, "userId:", userId);
    
 
    let studentResult;
    
    try {
 
      if (studentId) {
        console.log("Attempting to find student by studentId:", studentId);
        studentResult = await pool.query(`
          SELECT id FROM students WHERE id = $1 AND is_active = TRUE
        `, [studentId]);
      }
      

      if (!studentId || studentResult.rows.length === 0) {
        console.log("Trying to find student by user_id:", userId);
        studentResult = await pool.query(`
          SELECT s.id 
          FROM students s
          JOIN users u ON s.email = u.email
          WHERE u.id = $1 AND s.is_active = TRUE
        `, [userId]);
      }
      
      if (studentResult.rows.length === 0) {
        console.log("No student record found for user");
        return res.status(404).json({ message: "Student record not found for this user" });
      }
      
      const actualStudentId = studentResult.rows[0].id;
      console.log("Found student with ID:", actualStudentId);
  
      const elections = await pool.query(`
        SELECT 
          e.id, e.title, e.description, 
          e.date_from, e.date_to,
          e.start_time, e.end_time,
          e.status,
          ev.has_voted,
          (SELECT COUNT(*) FROM eligible_voters WHERE election_id = e.id) AS voter_count,
          (SELECT COUNT(*) FROM eligible_voters WHERE election_id = e.id AND has_voted = TRUE) AS vote_count,
          EXISTS (
            SELECT 1 FROM ballots b 
            WHERE b.election_id = e.id
          ) AS ballot_exists
        FROM elections e
        INNER JOIN eligible_voters ev ON e.id = ev.election_id
        WHERE ev.student_id = $1
        AND (e.needs_approval = FALSE OR e.needs_approval IS NULL)
        ORDER BY 
          CASE 
            WHEN e.status = 'ongoing' THEN 1
            WHEN e.status = 'upcoming' THEN 2
            ELSE 3
          END, 
          e.date_from
      `, [actualStudentId]);
      

      const result = elections.rows.map(election => ({
        ...election,
        has_voted: election.has_voted
      }));
      
      console.log(`Found ${result.length} elections for student`);
      return res.json(result);
      
    } catch (err) {
      console.error("Database error in getStudentElections:", err);
      return res.status(500).json({ error: 'Database error: ' + err.message });
    }
  } catch (err) {
    console.error("General error in getStudentElections:", err);
    return res.status(500).json({ error: 'Failed to fetch elections: ' + err.message });
  }
};

exports.getStudentProfile = async (req, res) => {
  try {
    console.log("Student profile requested by user:", req.user);

    const userId = req.user.id;
    const studentId = req.user.studentId;
    
    if (!userId) {
      console.log("No user ID found in token");
      return res.status(401).json({ message: "Authentication required. User ID not found in token." });
    }
    
    console.log("Looking up profile for studentId:", studentId, "userId:", userId);
    
    let result;
    
    try {

      if (studentId) {
        result = await pool.query(`
          SELECT 
            s.id, 
            s.first_name AS "firstName", 
            s.last_name AS "lastName", 
            s.email, 
            s.student_number AS "studentNumber", 
            s.course_name AS "courseName", 
            s.year_level AS "yearLevel", 
            s.gender,
            s.profile_picture,
            COUNT(DISTINCT ev.election_id) AS "totalEligibleElections",
            SUM(CASE WHEN ev.has_voted = TRUE THEN 1 ELSE 0 END) AS "votedElections"
          FROM students s
          LEFT JOIN eligible_voters ev ON s.id = ev.student_id
          WHERE s.id = $1 AND s.is_active = TRUE
          GROUP BY s.id
        `, [studentId]);
      }
      
 
      if (!studentId || result.rows.length === 0) {
        console.log("Trying to find student profile by user_id:", userId);
        result = await pool.query(`
          SELECT 
            s.id, 
            s.first_name AS "firstName", 
            s.last_name AS "lastName", 
            s.email, 
            s.student_number AS "studentNumber", 
            s.course_name AS "courseName", 
            s.year_level AS "yearLevel", 
            s.gender,
            s.profile_picture,
            COUNT(DISTINCT ev.election_id) AS "totalEligibleElections",
            SUM(CASE WHEN ev.has_voted = TRUE THEN 1 ELSE 0 END) AS "votedElections"
          FROM students s
          LEFT JOIN eligible_voters ev ON s.id = ev.student_id
          WHERE s.user_id = $1 AND s.is_active = TRUE
          GROUP BY s.id
        `, [userId]);
      }
      
      if (result.rows.length === 0) {
        console.log("No student profile found for user");
        return res.status(404).json({ message: "Student profile not found" });
      }

      const profile = result.rows[0];
      if (profile.profile_picture) {
        profile.profile_picture = `/uploads/profiles/${profile.profile_picture}`;
      }
      
      console.log("Found student profile:", profile.firstName, profile.lastName);
      return res.status(200).json(profile);
      
    } catch (err) {
      console.error("Database error in getStudentProfile:", err);
      return res.status(500).json({ message: "Database error: " + err.message });
    }
  } catch (error) {
    console.error("General error in getStudentProfile:", error);
    return res.status(500).json({ message: "Failed to fetch student profile: " + error.message });
  }
};

exports.uploadProfilePicture = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: "No file uploaded" });
    }

    console.log("File uploaded:", req.file.filename);

    const userId = req.user.id;
    const studentId = req.user.studentId;
    
    if (!userId) {
      return res.status(401).json({ message: "Authentication required. User ID not found in token." });
    }
  
    let studentResult;
    
    try {
    
      if (studentId) {
        studentResult = await pool.query(`
          SELECT id FROM students WHERE id = $1 AND is_active = TRUE
        `, [studentId]);
      }
      
      if (!studentId || studentResult.rows.length === 0) {
        console.log("Trying to find student by user_id:", userId);
        studentResult = await pool.query(`
          SELECT id FROM students WHERE user_id = $1 AND is_active = TRUE
        `, [userId]);
      }
      
      if (studentResult.rows.length === 0) {
        console.log("No student record found for user");
        return res.status(404).json({ message: "Student record not found for this user" });
      }
      
      const actualStudentId = studentResult.rows[0].id;
      
      await pool.query(`
        UPDATE students 
        SET profile_picture = $1 
        WHERE id = $2
      `, [req.file.filename, actualStudentId]);
      
      const filePath = `/uploads/profiles/${req.file.filename}`;
      
      return res.json({ success: true, filePath });
    } catch (err) {
      console.error("Database error in uploadProfilePicture:", err);
      return res.status(500).json({ message: "Database error: " + err.message });
    }
  } catch (error) {
    console.error("Error uploading file:", error);
    return res.status(500).json({ message: "Server error", error });
  }
};

exports.getStudentsByCourses = async (req, res) => {
  try {
    // Check if courses parameter is provided
    const { courses } = req.query;
    
    if (!courses) {
      return res.status(400).json({ success: false, message: "Courses parameter is required" });
    }
    
    // Split the comma-separated course list
    const courseList = courses.split(',').map(course => course.trim());
    
    if (courseList.length === 0) {
      return res.status(400).json({ success: false, message: "At least one course must be provided" });
    }

    // Validate each course name to prevent SQL injection
    // Only allow alphanumeric characters, spaces, and common punctuation
    const courseRegex = /^[a-zA-Z0-9\s\-_.,()]{1,100}$/;
    for (const course of courseList) {
      if (!courseRegex.test(course)) {
        return res.status(400).json({ 
          success: false, 
          message: `Invalid course name format: ${course}. Only alphanumeric characters, spaces, and common punctuation are allowed.` 
        });
      }
    }
    
    // Build the query with proper parameterization
    let query = `
      SELECT 
        s.id, 
        s.first_name, 
        s.last_name, 
        s.email, 
        s.student_number, 
        s.course_name, 
        s.year_level, 
        s.gender, 
        s.is_active,
        u.is_locked,
        u.locked_until
      FROM students s
      JOIN users u ON s.user_id = u.id
      WHERE s.course_name IN (`;
    
    // Create parameterized query with proper indices
    const placeholders = courseList.map((_, index) => `$${index + 1}`).join(',');
    query += `${placeholders}) ORDER BY s.last_name ASC`;
    
    const result = await pool.query(query, courseList);
    
    return res.status(200).json(result.rows);
  } catch (error) {
    console.error("Error fetching students by courses:", error);
    return res.status(500).json({ 
      success: false, 
      message: "Failed to fetch students by courses",
      error: error.message 
    });
  }
};
